AWSTemplateFormatVersion: '2010-09-09'
Description: Template para criar uma VPC com sub-redes públicas e privadas e uma instância EC2
Resources:
  
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: 'MyVPC'
  
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway 
  
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: sa-east-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnetA'

  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: sa-east-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'PublicSubnetB'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: 'PublicRouteTable'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
    
  SubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  
  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Allow SSH, HTTP, and HTTPS traffic'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
      SecurityGroupEgress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
  
  MyLaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: ami-0c39cfd0df707c16c  # Substitua pelo ID da sua AMI preferida
      InstanceType: t2.micro
      SecurityGroups: 
        - !Ref PublicSecurityGroup
      IamInstanceProfile: !Ref MyInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          yum install -y python3
          yum install -y python3-pip  # Adiciona o pip para instalar boto3
          yum install -y mod_cgi
          pip3 install boto3
          systemctl start httpd
          systemctl enable httpd

          echo "<html><body><h1>Hello World</h1></body></html>" > /var/www/html/index.html

          cat <<EOF > /var/www/html/form.html
          <html>
          <body>
          <h1>Input Form</h1>
          <form action="/cgi-bin/submit_form.py" method="post">
            <label for="id">ID:</label><br>
            <input type="text" id="id" name="id"><br>
            <label for="value">Value:</label><br>
            <input type="text" id="value" name="value"><br><br>
            <input type="submit" value="Submit">
          </form>
          </body>
          </html>
          EOF

          mkdir -p /var/www/cgi-bin

          cat <<EOF > /var/www/cgi-bin/submit_form.py
          #!/usr/bin/env python3
          import cgi
          import boto3

          print("Content-Type: text/html")
          print()

          form = cgi.FieldStorage()
          id = form.getvalue("id")
          value = form.getvalue("value")

          if id and value:
              dynamodb = boto3.resource('dynamodb', region_name='sa-east-1')
              table = dynamodb.Table('MyTable')
              response = table.put_item(Item={'Id': id, 'Value': value})
              print("<html><body><h1>Data Submitted</h1></body></html>")
          else:
              print("<html><body><h1>Error: Both fields are required.</h1></body></html>")
          EOF

          chmod +x /var/www/cgi-bin/submit_form.py

          # Enable CGI in Apache
          sed -i 's/^#\(AddHandler cgi-script .cgi\)$/AddHandler cgi-script .cgi .py/' /etc/httpd/conf/httpd.conf
          sed -i 's/^#\(Options Indexes FollowSymLinks\)$/Options Indexes FollowSymLinks ExecCGI/' /etc/httpd/conf/httpd.conf
          systemctl restart httpd
  
  MyAutoScallingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      LaunchConfigurationName: !Ref MyLaunchConfiguration
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '1'
      TargetGroupARNs:
        - !Ref MyTargetGroup
      Tags:
        - Key: Name
          Value: 'MyAutoScalingGroup'
          PropagateAtLaunch: true

  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: 'MyLoadBalancer'
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref PublicSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: 'MyLoadBalancer'

  MyTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      VpcId: !Ref MyVPC
      Protocol: HTTP
      Port: '80'
      HealthCheckProtocol: HTTP
      HealthCheckPort: '80'
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: '30'
      HealthCheckTimeoutSeconds: '5'
      HealthyThresholdCount: '5'
      UnhealthyThresholdCount: '2'
      TargetType: 'instance'
      Tags:
        - Key: Name
          Value: 'MyTargetGroup'

  MyListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Protocol: HTTP
      Port: '80'
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup

  ScaleUpPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref MyAutoScallingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '1'
      Cooldown: '300'
  
  ScaleDownPolicy:
    Type: 'AWS::AutoScaling::ScalingPolicy'
    Properties:
      AutoScalingGroupName: !Ref MyAutoScallingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: '-1'
      Cooldown: '300'
  
  MyCPUAlarmHigh:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Alarm if CPU too high or metric disappears indicating instance is down'
      Namespace: 'AWS/EC2'
      MetricName: 'CPUUtilization'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScallingGroup
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '40'
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
      TreatMissingData: notBreaching

  MyCPUAlarmLow:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Alarm if CPU too low indicating serious problem'
      Namespace: 'AWS/EC2'
      MetricName: 'CPUUtilization'
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref MyAutoScallingGroup
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: '30'
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy
      TreatMissingData: notBreaching
  
  MyDynamoDBTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: MyTable
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      Tags:
        - Key: Name
          Value: MyDynamoDBTable
    
  MyInstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !GetAtt MyDynamoDBTable.Arn

  MyInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref MyInstanceRole